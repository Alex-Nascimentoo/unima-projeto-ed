# Unima Projeto ED

Este projeto √© um sistema de **otimiza√ß√£o de rotas para entregas urbanas**, desenvolvido na disciplina de Estruturas de Dados. Ele aplica conceitos fundamentais de **grafos**, **algoritmos de menor caminho** e **heur√≠sticas de roteamento de ve√≠culos** em um problema pr√°tico do dia a dia. Para isso, utilizamos dados reais do **OpenStreetMap**, que s√£o transformados em grafos e usados para simular a opera√ß√£o de entregas urbanas.

---

## üéØ Objetivo

O trabalho tem como principais metas:

- Construir um **grafo** a partir de dados reais do OSM.  
- Implementar dois algoritmos cl√°ssicos de **menor caminho**:  
  - **Dijkstra** (base).  
  - **A\*** (com heur√≠stica haversine).  
- Resolver o **Problema de Roteamento de Ve√≠culos com Capacidade (CVRP)** usando a heur√≠stica do **Vizinho Mais Pr√≥ximo**.  
- Utilizar **estruturas de dados implementadas manualmente**, como:  
  - **Priority Queue** (heap bin√°rio m√≠nimo).  
  - **Queue** (FIFO) para pedidos de entrega.  
  - **Stack** (LIFO) para reconstru√ß√£o de caminhos.  

---

## ‚öôÔ∏è Como funciona

O funcionamento do sistema acontece em tr√™s etapas principais:

1. **Mapa ‚Üí Grafo**  
   As ruas e cruzamentos do OpenStreetMap s√£o transformados em n√≥s e arestas. Cada aresta recebe como peso a **dist√¢ncia em quil√¥metros**, calculada pela f√≥rmula de haversine.  

2. **Menor Caminho**  
   - O algoritmo de **Dijkstra** encontra sempre o menor caminho explorando todas as possibilidades.  
   - O algoritmo **A\*** √© uma vers√£o otimizada que utiliza a dist√¢ncia em linha reta como heur√≠stica para guiar a busca e reduzir a quantidade de n√≥s explorados.  

3. **CVRP (Capacitated Vehicle Routing Problem)**  
   Um dep√≥sito central e clientes com demandas s√£o definidos. O sistema respeita a **capacidade m√°xima do ve√≠culo**, garantindo que as rotas comecem e terminem no dep√≥sito. A heur√≠stica do vizinho mais pr√≥ximo √© usada para construir essas rotas.  

---

## üöÄ Instala√ß√£o e Execu√ß√£o

> **Requisitos:** [Python 3.10+](https://www.python.org/) e [Poetry](https://python-poetry.org/docs/#installation).  

No terminal, execute:

```bash
# 1) Clonar o reposit√≥rio
git clone https://github.com/Alex-Nascimentoo/unima-projeto-ed.git
cd unima-projeto-ed

# 2) Instalar as depend√™ncias
poetry install

# 3) Executar o sistema

# --- Batch com A* (default) ---
# Calcula rotas usando A*. Sa√≠da: rotas geradas + dist√¢ncia total (em km).
poetry run python -m unima_projeto_ed.main --mode batch --sp a_star

# --- Batch com Dijkstra ---
# Calcula rotas usando Dijkstra. Sa√≠da: rotas geradas + dist√¢ncia total (em km).
poetry run python -m unima_projeto_ed.main --mode batch --sp dijkstra

# --- API Flask ---
# Sobe uma API HTTP em http://127.0.0.1:5000/
# Ao acessar no navegador, retorna {"message": "API de Roteamento pronta!"}.
poetry run python -m unima_projeto_ed.main --mode api
